[{"/Users/chetan/Development/node/react-treeview/src/index.tsx":"1","/Users/chetan/Development/node/react-treeview/src/reportWebVitals.ts":"2","/Users/chetan/Development/node/react-treeview/src/App.tsx":"3","/Users/chetan/Development/node/react-treeview/src/utils/string.extensions.ts":"4","/Users/chetan/Development/node/react-treeview/src/components/Todos.tsx":"5","/Users/chetan/Development/node/react-treeview/src/components/GridItem.tsx":"6","/Users/chetan/Development/node/react-treeview/src/components/Tab.tsx":"7","/Users/chetan/Development/node/react-treeview/src/components/Todo.tsx":"8"},{"size":449,"mtime":1609559761651,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1607399286080,"results":"11","hashOfConfig":"10"},{"size":433,"mtime":1610508794258,"results":"12","hashOfConfig":"10"},{"size":417,"mtime":1607657447618,"results":"13","hashOfConfig":"10"},{"size":4769,"mtime":1610514644918,"results":"14","hashOfConfig":"10"},{"size":1718,"mtime":1609461870710,"results":"15","hashOfConfig":"10"},{"size":6728,"mtime":1610675009218,"results":"16","hashOfConfig":"10"},{"size":3713,"mtime":1610683080144,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"jqiqh0",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},"/Users/chetan/Development/node/react-treeview/src/index.tsx",[],["39","40"],"/Users/chetan/Development/node/react-treeview/src/reportWebVitals.ts",[],"/Users/chetan/Development/node/react-treeview/src/App.tsx",[],"/Users/chetan/Development/node/react-treeview/src/utils/string.extensions.ts",[],["41","42"],"/Users/chetan/Development/node/react-treeview/src/components/Todos.tsx",["43"],"/Users/chetan/Development/node/react-treeview/src/components/GridItem.tsx",["44","45"],"import {\n  Checkbox,\n  createStyles,\n  FormControlLabel,\n  Grid,\n  makeStyles,\n  Paper,\n  Theme,\n} from \"@material-ui/core\";\nimport { red } from \"@material-ui/core/colors\";\nimport clsx from \"clsx\";\nimport React, { useState } from \"react\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: \"right\",\n      color: theme.palette.text.secondary,\n    },\n    formControl: {\n      margin: theme.spacing(1),\n      marginLeft: 500,\n      marginRight: -20,\n    },\n    itemSpacing: {\n      marginTop: theme.spacing(2),\n    },\n    strikethrough: {\n      marginTop: theme.spacing(2),\n      textDecoration: \"line-through\",\n      color: \"red\",\n    },\n  })\n);\n\nconst GridItem = () => {\n  const classes = useStyles();\n  const [completed, setCompleted] = useState(false);\n\n  const handleChange = () => {\n    setCompleted(!completed);\n    // if (completed) {\n    //   setCompleted(false);\n    // } else {\n    //   setCompleted(true);\n    // }\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={1}>\n        <Grid\n          item\n          xs={6}\n          className={clsx(classes.itemSpacing, {\n            [classes.strikethrough]: completed,\n          })}\n        >\n          Testing1\n        </Grid>\n        <Grid item xs={6}>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={completed}\n                onChange={handleChange}\n                name=\"checkedB\"\n                color=\"primary\"\n              />\n            }\n            label=\"Completed\"\n          />\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default GridItem;\n",["46","47"],"/Users/chetan/Development/node/react-treeview/src/components/Tab.tsx",[],"/Users/chetan/Development/node/react-treeview/src/components/Todo.tsx",["48"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Box,\n  Checkbox,\n  FormControlLabel,\n  Grid,\n  makeStyles,\n  Theme,\n  Typography,\n} from \"@material-ui/core\";\nimport clsx from \"clsx\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\ntype todoConfig = {\n  data: any[];\n  isComplete: boolean;\n};\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    width: \"800px\",\n  },\n  text: {\n    width: 400,\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1,\n  },\n  iconButton: {\n    padding: 10,\n  },\n  divider: {\n    height: 28,\n    margin: 4,\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    //fontWeight: theme.typography.fontWeightRegular,\n  },\n  secondaryHeading: {\n    fontSize: theme.typography.pxToRem(15),\n    color: theme.palette.text.secondary,\n  },\n  itemSpacing: {\n    marginTop: theme.spacing(1.4),\n    //pl: 4,\n    //marginLeft: theme.spacing(1),\n    align: \"left\",\n  },\n  strikethrough: {\n    textDecoration: \"line-through\",\n    color: \"red\",\n  },\n}));\nconst defaultProps = {\n  width: 700,\n  bgcolor: \"background.paper\",\n  m: 1,\n  textAlign: \"left\",\n  alignItems: \"justify\",\n  //style: { width: '5rem', height: '5rem' },\n  borderColor: \"text.primary\",\n};\n\nexport default function Todo(props: todoConfig) {\n  const classes = useStyles();\n  const [todos, setTodos] = useState(props.data);\n\n  const handleChange = (\n    evt: React.ChangeEvent<HTMLInputElement>,\n    id: string\n  ) => {\n    const todo = todos.find((todo) => Number(todo.id) === Number(id));\n\n    if (todo) {\n      console.log(`Todo for id ${id} is  ${todo.completed}`);\n      todo.completed = !todo.completed;\n    }\n\n    setTodos([...todos]);\n  };\n\n  return (\n    <div className={classes.root}>\n      <div>\n        {props.data.map((todo: any) => (\n          <Accordion key={todo.id}>\n            <AccordionSummary\n              expandIcon={<ExpandMoreIcon />}\n              aria-controls=\"panel1a-content\"\n              id=\"panel1a-header\"\n            >\n              <Typography\n                className={clsx(classes.heading, {\n                  [classes.strikethrough]: todo.completed && props.isComplete,\n                })}\n              >\n                {todo.title}\n              </Typography>\n            </AccordionSummary>\n            <AccordionDetails>\n              <Box display=\"flex\">\n                <Box border={1} {...defaultProps}>\n                  <Grid container spacing={1}>\n                    <Grid\n                      item\n                      xs={9}\n                      className={clsx(classes.itemSpacing, {\n                        [classes.strikethrough]:\n                          todo.completed && props.isComplete,\n                      })}\n                    >\n                      &nbsp;{todo.description}\n                    </Grid>\n                    <Grid item xs={3}>\n                      <FormControlLabel\n                        control={\n                          <Checkbox\n                            checked={todo.completed}\n                            onChange={(\n                              evt: React.ChangeEvent<HTMLInputElement>\n                            ) => handleChange(evt, todo.id)}\n                            name=\"checkedB\"\n                            color=\"primary\"\n                          />\n                        }\n                        label=\"Completed\"\n                      />\n                    </Grid>\n                  </Grid>\n                </Box>\n              </Box>\n            </AccordionDetails>\n          </Accordion>\n        ))}\n      </div>\n    </div>\n  );\n}\n",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"49","replacedBy":"53"},{"ruleId":"51","replacedBy":"54"},{"ruleId":"55","severity":1,"message":"56","line":99,"column":55,"nodeType":"57","messageId":"58","endLine":99,"endColumn":57},{"ruleId":"59","severity":1,"message":"60","line":7,"column":3,"nodeType":"61","messageId":"62","endLine":7,"endColumn":8},{"ruleId":"59","severity":1,"message":"63","line":10,"column":10,"nodeType":"61","messageId":"62","endLine":10,"endColumn":13},{"ruleId":"49","replacedBy":"64"},{"ruleId":"51","replacedBy":"65"},{"ruleId":"59","severity":1,"message":"66","line":1,"column":17,"nodeType":"61","messageId":"62","endLine":1,"endColumn":26},"no-native-reassign",["67"],"no-negated-in-lhs",["68"],["67"],["68"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'Paper' is defined but never used.","Identifier","unusedVar","'red' is defined but never used.",["67"],["68"],"'useEffect' is defined but never used.","no-global-assign","no-unsafe-negation"]